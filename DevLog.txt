Brendan Thompson
Development Log

- Overview ---
This is the Development Log of my VST design process. I have been writing in it quite extensively: taking notes on the different topics, describing just about every issue faced, and documenting pretty much all of the decisions made.

------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/19/17
	
- After 4 days of struggling with the IPlug Framework, I am switching to JUCE.
	- Main Issues with IPlug:
		1) Can't Get Visual Studio to run MyFirstPlugin
			- 2 Builds completed but there is still 1 failing
			- "LNK2019 unresolved external symbol "int_stdcall MainDlgProc(struct HWND_*, unsigned int, unsigned int, long)""
			- I do not want to try to track down that line and figure out what it is doing
			- I do not want to figure out where to look
			- I am getting sick of everything being outdated
			- I am getting sick of chasing down libraries & classes
		2) Can't turn Basic Visual Studio Project into WLD-OL example plugin project
			- All of the files are radically different
			- None of the same folders
		3) EVERYTHING is old and outdated
	- JUCE:
		- Well developed and maintained by a legitimate company
		- Online resources like forums and videos
		- Advanced Libraries and Classes
			- JUCE handles most Digital & Audio Signal Processing
			- JUCE handles MIDI input & output
		- Neat GUI development tools
		- Well constructed development software
		- Still C++ coding practice
		- Still practice using other libraries and classes
	- Problems:
		- Wasted 4 days
		- No longer using Visual Studio (although I do have a fresh copy)
		- No more "fun" with system files & managing dependencies	
- Beginning with JUICE
	
------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/18/17

- Fixing Windows SDK Continued...
	- https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found
		- "Uninstall and during reinstall go to "individual componenets" and select Windows 8.1 SDK"
		- "Then go to the project > Right click and Re-target to match the SDK required"
		- "One or more projects in the solution were not loaded correctly. Please see the Output Window for details"	
			- error  : Project "D:\Brendan\Documents\2017 Summer Project\VST Synthesizer Design\wdl-ol\AAX_SDK\Libs\AAXLibrary\WinBuild\AAXLibrary.vcxproj" could not be found.
			- error  : Project "D:\Brendan\Documents\2017 Summer Project\VST Synthesizer Design\wdl-ol\PT9_SDK\AlturaPorts\TDMPlugIns\PlugInLibrary\WinBuild\PlugInLib.vcxproj" could not be found.
- Ran project and output windows has 524 Errors... 
	- "Cannot open source file 'string.h'", stdlib.h, ctype.h, math.h, assert.h
		- Multiple different files failed this
	- Error E0282: "The global scope has no 'acosf'", asinf, atanf, atan2f, ceilf, cosf, coshf, expf, fabsf, floorf, fmodf, frexpf, ldexpf, logf, log10f, modff, powf, sqrtf, etc.
		- all from cmath
	- Error E1696: "cannot open source file 'corecrt.h'", stddef.h, stdio.h
		- from crtdefs, stddef.h, and stdio.h, respectively.
	- Error E0020: identifier "FILE" is undefined
		- from cstdio
	- Apparently the standard libraries are missing
		- https://social.msdn.microsoft.com/Forums/vstudio/en-US/0f580a73-6f11-4aa6-abbe-6bf1438734c2/standard-files-stddefh-stringh-missing-in-visual-studio-2015-rc?forum=vclanguage
		- "The headers, sources, and libraries are now distributed as part of a separate Universal CRT SDK. This SDK is included with Visual Studio; it is installed by default to C:\Program Files (x86)\Windows Kits\10."
		- Checking Individual Components for "Universal CRT SDK"...
			- It was unselected!! Trying to build again...
			- "2 Succeeded and 1 Failed."
			- "Couldn't find path to .exe" still
			- Only 478 errors now, still including gems like "cannot open source file "string.h""
		- I feel like my Visual Studio build needs to be modified to include another component. 
			- https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/
				- "If you... upgrade an existing project to Visual Studio 2015, it should generally pick up these new directories automatically."
				- "If you upgrade a project that does not use the Visual Studio MSBuild props and targets files or that does not inherit the default include and lobrary paths from those props and targets files, you'll need to update your project manually to include the new directories"
					- **** DID NOT DO ****
						- IDK where to put any of these
					- $(UniversalCRT_IncludePath)
					- $(UniversalCRT_LibraryPath_x86)
					- $(UniversalCRT_LibraryPath_x64)
					- $(UniversalCRT_LibraryPath_arm)
				- "App-local deployment of the Universal CRT is supported. To obtain the binaries for app-local deployment, install the Windows SDK for Windows 10"
					- I think I already have the SDK.
			- https://stackoverflow.com/questions/31736361/visual-studio-2015-gives-me-errors-upon-creating-a-simple-test-console-program
				- Cezar Azevedo de Faveri Solution: *** DID NOT DO ****
					- "That's because Visual Studio changed the path to C headers"
					- **** Did Not Do Solution: ***
						- Project > Properties
						- Configuration Properties > VC++ >Directories > Library Directories
							- "Add path to C:\ProgramFiles (x86)\Windows Kits\10\Lib\10.0.10150.0\ucrt\(CHOOSE YOUR ARCHITECTURE)"
						- C/C++ > General > Additional Include Directories	
							- "Add path to C:\ProgramFiles (x86)\Windows Kits\10\Include\10.0.10150.o\ucrt
	***	****	- Sean Werkema Solution	:
					- "By default, VS2017 installs the headers only for the Windows 10 UWP SDK, but it doesn't change the "Windows SDK Version" in any projects it upgrades to a version of the SDK that was actually installed. Mine was set to 8.1 after the upgrade, and there are no headers installed for 8.1"
					- "If you're upgrading an existing project, you'll have to change this setting manually to whichever version of the headers you actuall have."
					- "The list of installed versions can be found at C:\ProgramFiles (x86)\Windows Kits\10\Include\ and the similar folders near it
					- Solution:
						- Project > Properties
						- Configuration Properties > General > Windows SDK Version
							- Set to current SDK (10.0.15063.0)
- Rerun project and Only 1 (2) Errors!
	- "0 Succeeded, 1 Failed, and 2 up-to-date"
	- "LNK2019 unresolved external symbol "int_stdcall MainDlgProc(struct HWND_*, unsigned int, unsigned int, long)""
		- File: app_main.obj
	- "LNK1120 1 unresolved externals"
		- File: IPlugEffect.exe
	- Problem Solving:
		- stack overflow 2061715
			- Check Configuration Properties > Linker > General > Additional Library Directories
				- IDK what I'm looking for
				
- ******* Changing My Approach ********:
	- Before: I downloaded a template VST Synth Visual Studio Project File and installed a bunch of Software Development Tools.
		- I was trying to get some outdated code to run on the newest software
	- New plan: Get a new Visual Studio 2017 Application to run and then slowly start turning it into a synth VST plugin using the template.
		- Open New Project
			- File > New Project
				- Win32 Application
			- Next
			- Application Type = Windows Application
				- Lets see if I can get some sort of interface going
			- Wow that creates a ton of files. I hope someday I will know what they all do
		- Empty Program Runs Just Fine
- Test Project > Test Project > ReadMe:
	- TestProject.vcxproj
		- main project file for VC++ projects
		- version of Visual C++ that generated the file
		- information about the platforms, configurations, and project features selected
	- TestProject.vcxproj.filters
		- This is the filters file for VC++ projects generated using an Application Wizard. 
		- It contains information about the association between the files in your project and the filters.
		- e.g. ".cpp" files are associated with the "Source Files" filter
	- TestProject.cpp
		- This is the main application source file.
	- TestProject.rc
		- This is a listing of all of the Microsoft Windows resources that the program uses
		- Includes the icons, bitmaps, and cursors
	- Resource.h
		- This is the standard header file, which defines new resource IDs.
		- Microsoft Visual C++ reads and updates this file.
	Other standard files:
		StdAfx.h, StdAfx.cpp
			These files are used to build a precompiled header (PCH) file
			named TestProject.pch and a precompiled types file named StdAfx.obj.
- Analyzing TestProject.cpp
	- Functions:
		-int APIENTRY wWinMain(_In_HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPWSTR lpCmdLine, _In_ int nCmdShow)
			- main()
			-  
		- ATOM MyRegisterClass(HINSTANCE hInstance)
			- Description: Registers the window class
			- ATOM return type = "16-bit Windows handle-like primitive... not a pointer or an index"
				- Handle = identification label/number
				- Primitive = ?
				- returns a handle that points at something
			- HINSTANCE parameter type = "Handle to a module. Base address of the module in Memory"
				- takes in the handle for the instance of the application
			- WNDCLASSEXW structure = "Contains the window class attributes that are registered" 
			- Creates a window class called wcex
			- Sets some attributes of wcex
			- Return the value that is returned by the function RegisterClassExW(&wcex)
			- Understanding: 
				- Registers the window as a class and sets some attributes. 
				- Takes in the window's handle (HINSTANCE) and returns a handle (ATOM) to the class created
		- BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
			- Description: Saves instance handle and creates main program window
			- nCmdShow = hint to the application how the main window should show
				- show, hide, maximize, etc.
				- called by ShowWindow
			- Initializes hInst (instance handle global variables)
			- hWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr)
			- ShowWindow(hWnd, nCmdShow)
			- UpdateWindow(hWnd)
			- Understanding: 
				- Gets the window up
				- Takes in the window's handle (hInstance) and main window show info (nCmdShow)
				- returns whether or not it initialized properly
		- LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
			- Description: Processes messages for the main window
			- Messages:
				- WM_COMMAND = process the application menu
				- WM_PAINT = paint the main window
				- WM_DESTROY = post a quit message and return
		- INT_PTR CALLBACK About (HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
			- Description: Message Handler for about box
- MyFirstPlugin vs TestProject:
	- 0 of the same folders...
	- MyFirstPlugin vs (TestProject > Test Project)
		- Obvious Files in both: FileName.cpp, FileName.h, resource.h 
		- Other Common Files:
			- FileName.rc Resource Script
		- There is no actual design form, instead, because it is a windows application it is much more dynamic and code based
	- resource.h vs Resource.h
		- absolutely nothing is the same
	- MyFirstPlugin.cpp vs TestProject.cpp
		- none of the same #includes (TP = stdafx.h)
		- none of the same globals (TP = hInst, szTitle, szWindowClass)
			- This is definitely concerning.
			- What vudoo is MyFirstPlugin using where it doesn't need any basic windows stuff
- FrankensteinPlugin = Trying to bring code from MyFirstPlugin to TestProject
	- Yeah that's not gonna happen
- WALLSSSSSS. AHHHHHHH.
- Considering switching to JUICE...
	- Youtube: "How to create VST & AU Plugin with JUICE" by Coceli
	- Developing Audio Applications with JUCE, Fabian Renn-Giles and Timur Doumler, JUCE Summit 2015
		- Extract away audio/midi input/out as well as other technical information
			
------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/17/17

- Uninstall and Reinstall Visual Studio
	- Didn't include any extensions or anything.
	- Only 643MB or something like that
	- Launched Properly
	- Opened the .sln from Visual Studio and needed to install 10 extensions:
		- Visual C++ Toolset, ATL, and optional features like MFC and C++/CLI
		- Installed
	- Launched IPlugEffect & Visual Studio by double clicking IPlugEffect.sln
		- "One or more projects in the solution were not loaded correctly. Please see the Output Window for details"
		- "The following projects use an earlier version of the Visual C++ platform toolset. You can upgrade your projects to target the latest Microsoft Visual Studio 2017 toolkit. You can also select the target Windows SDK version from those installed on your machine."
			- Windows SDK Version: "10.0.15063.0" (no other options)
			- Platform Toolset: "Upgrade to v141" (other option is "No Upgrade")
			- 8 Extensions CheckBoxed
			- I'm clicking OK...
			- It looks like it loaded successfully!
			- Console Output:
				"Opening repositories:
				D:\Brendan\Documents\2017 Summer Project\VST Synthesizer Design\wdl-ol
				Unable to complete read operation after process has exited."
- Project appears to be loaded into Visual Studio for the first time.
	- IPlugEffect-app is bold
	- Press f5 to load the project and...
		- "These projects are out of date, would you like to build them?"
			- lice - Debug Win32
			- IPlug - Debug Win32
			- IPlugEffect-app - Debug Win32
			- Clicking Yes and...
			- "There were build errors. Would you like to continue and run the last successful build?"
				- Yes and...
				- "Unable to start program ...\IPlugEffect.exe . The system cannot find the path specified"
				- Sounds like it didn't compile
				- 3 Errors!! "error Codes MSB8036: "The Windows SDK version 8.1 was not found. Install the required version of Windows SDK or change the SDK version in the project property pages or by right-clicking the solution and selecting "Retarget Solution""
					- lice, IPlug, IPlugEffect-app
- Correcting my version of Windows SDK... 
	- Retraced steps of installing dependancies and all the files look correct.
	- "Try installing the windows sdk 8.1 from: https://developer.microsoft.com/en-us/windows/downloads/windows-8-1-sdk"
		- *** DIDNT't DO ***
		- Windows Software Development Kit (SDK) for Windows 8.1
		- I hope that in the end this all compatable with win10 / VS17			
			
------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/16/17

- Tested Pushing Ability
- Setup Part 2: Installing and setting up the necessary software
	- http://www.martin-finke.de/blog/articles/audio-plugins-002-setting-up-wdl-ol/
	A) Installing Visual Studio Community 2017 
		- https://www.visualstudio.com/vs/community/
		- I added all sorts of toolkits, extensions, and other Unity, Android, iOS, and .NET developer tools to my VS build
			- Didn't realize I shoulda gotten the Python one
			- 36GB installation...
		- Something failed with setup. Still launched though
		- More Problems later. See "G) Opening MyFirstPlugin Project"
	B) Download Oli-Larkin's WDL-OL from github
		- git clone https://github.com/olilarkin/wdl-ol
		- cd wdl-ol
		- git checkout 0a360c90b3460717210eeaee7464bc7009c9a5ba
	C) Adding Dependencies
		- "Setting up IPlug on Windows" youtube video by Oli Larkin
		- Move VST2 SDK files over 
			- Need to download the VST3 SDK
				- www.steinberg.net/en/company/developers.html
				- Version: VST 3.6.7 Audio Plug-Ins SDK
			- Source: VST_SDK > VST2_SDK > plugininterfaces > vst2.x
			- Files: aeffect.h & aeffectx.h
			- Destination: wdl-ol > VST_SDK
		- Move VST3 SDK files over
			- Source: VST_SDK > VST3_SDK
			- Files: everything. Carefull not to overwrite base > base_vc10.vcxproj
			- Destination: wdl-ol > VST3_SDK
		- Move ASIO_SDK Files for standalone apps
			- Need to download RtAudio's files
				- www.music.mcgill.ca/~gary/rtaudio/
				- Version: 4.1.2 (02/22/16)
			- Source: rtaudio-4.1.2 > include > (*cpp & *.h)
			- Files: all .cpp & .h
			- Destination: wdl-ol  > ASIO_SDK
	D) Install Python to D drive
		- https://www.python.org/getit/
		- Version: 3.6
		- Possibly downloaded 32 bit version
		- Disabled ~220 Character limit on path length. Idk if that will be necessary at any point?
	E) Create VST3 folder C > Program Files > Common Files > VST3 
	F) Duplicate IPlug Project IPlugEffect to create MyFirstPlugin
		- /c/Python27/python.exe duplicate.py IPlugEffect MyFirstPlugin BrendanThompson
			- bash: /c/Python27/python.exe: No such file or directory
				- need to find path to python
				- C:\Users\Brendan\AppData\Local\Programs\Python\Python36-32\python.exe
			- Error: file duplicate.py, Line 41. Missing Parenthesis in call to 'print'
				- need to fix wdl-0l > IPlugExamples > duplicate.py
				- print "" statement does not work in python 3
				- print ("") is proper syntax
			- Fixed every instance of print & script ran
			- script failed to replace project name strings in new folder
	G) Opening MyFirstPlugin project
		- IPlugEffect is the .sln (duplicate.py script didnt rename files)
		- When double-click -> Choose the application to open this file with: EMPTY
		- Visual Studio no longer launching from start menu shortcut
			- Possibly because I renamed the install folder
			- Missing Shortcut devenv.exe
			- Try opening -> Clicked "Fix it" -> said reinstall
			- Try again -> click "Delete it" -> deleted shortcut
			- Reopened Installer -> "Setup Completed With Failures" > Modify
				- Modifications under original folder name:
					- All 3 Windows ones
					- Python
					- Mobile Development with .NET, Unity, Mobile Development with C++
					- Setup Operation Failed. Wont Launch from installer. Didnt create new Start Menu Shortcut				
					
- Learning Part 1: Analyzing the code of IPlugEffect.h, IPlugEffect.cpp, and resource.h (Summarized by Oli-Larking Presentation from Part 2)
	- Martin-Finke #3, Examining the Code
	- resource.h = Constants, Flags, and Images
		- 1-26 = Name, Version, Unique ID (registering/cataloging plugins), etc.
		- 56-60 = KNOB ID and Image
			- #define KNOB_ID 101
			- Image = sprite sheet of knob in all 60 different positions, 48x48
		- 63-64 = Set Size of plugin window (300 x 300)
			- #define GUI_WIDTH, GUI_HEIGHT
	- IPlugEffect.h = Interface
		- Constructor
		- Destruction
		- Member Functions
			- Reset = called when sample rate is changed
			- OnParamChange = when knob turned
			- ProcessDoubleReplacing = core of plugin -> process incoming audio
		- double mGain = main gain variable
	- IPlugEffect.cpp = Implementation
		- 8-12 = enum EParams = sets num parameters
		- 14-22 = enum ELayout = sets position of knob & defines num frames
		- 24-44 = Constructor()
			- 30-31 = Set up Plug-in Attributes
				- SetShape gives knob non-linear behavior
			- 33 = creates graphic context with the right size
			- 34 = sets background color
			- 36 = load knob 
			- 38 = creates new IKnobMultiControl (C++ class for GUI Knob)
			- 40 = Attach Graphics
			- 42-43 = Create Preset
		- 46 = Destructor()
		- 48-62 = ProcessDoubleReplacing() = core of plugin -> process incoming audio
			- Audio Stream = sequence of doubles, each containing amplitude at a given time
			- First Parameter = inputs
			- Second Parameter = outputs
			- Third Parameter = nFrames = samples per channel(60)
			- 52-55 = set pointers to input and output buffers
				- *in1 = left channel, *in2 = right channel
			- 57-61 = iterate through buffers and process the audio 
				- *out1 = *in1 * mGain;			
		- 64-68 = Reset()
		- 70-83 = OnParamChange() = when knob turned
			- 72 = IMutexLock for "Thread Safety"
			- rest = Switch for doing work regarding which parameter changed
		
- Learning Part 2: Oli Larkin further reading M4_u Convention IPlug Workshop Slides & Examples
	- Life after Pluggo: Getting Started programming plugins in C++ using IPlug
	- Same code as described by the Martin Finke article but summarized better
	- Chunks?
		- Necessary if plugin need to store arbitrary data in its state or presets. Otherwise each parameter value is a single floating point num
	- Parameters:
		- Each Parameter needs an index (starting at 0)
		- Add Parameters in the constructor using GetParam(idx)
		- EParams enum is used to enumerate the parameters and give them individual IDs (kGain)
		- Four Types of IPlug Parameters:
			A) Double, continuous parameter:
				GetParam(index) -> InitDouble("name", defaultValue, minValue, maxValue, step, unitLabel);
				GetParam(kGain) -> InitDouble("Gain", 50., 0., 100., 0.01, "%");
			B) Enumerated List, discrete parameter:
				GetParam(index) -> InitEnum("name", defaultValue, numItems);
				GetParam(kMode) -> InitEnum("Mode", 0, 4);
				GetParam(kMode) -> SetDisplayText(2, "a"); // set display text for third item to "c"
			C) Boolean, discrete parameter:
				GetParam(kEnable) ->InitBool("name", defaultValue);
				GetParam(kEnable) ->InitBool("Enable", 0);
			D) Integer, discreet parameter
				GetParam(kCount) ->InitInt("name", defaultValue, minValue, maxValue, unitLabel);
				GetParam(kCount) ->InitInt("Count", 50, 0, 100, "%");
		- Handling Parameter Changes:
			switch (paramIdx){
				case kGain:
					DBGMSG( "Value of gain: %f\n", GetParam(kGain)->Value());
					break;
				case kMode:
					DBGMSG( "Value of mode: %i\n", GetParam(kMode)->Int());
					break;
				case kEnable:
					DBGMSG( "Value of enable: %i\n", GetParam(kEnable)->Bool());
					break;
				case kCount:
					DBGMSG( "Value of count: %i\n", GetParam(kCount)->Int());
					break;
				default:
					break;
			}
	- IsInChannelConnected(ch) and IsOutChannelConnected(ch) to find out channel config
	- Handling MIDI:
		- IMidiQueue = helper class by Theo Niessink
			- queues all time-stamped messages that arrrives from ProcessMidiMsg()
			- handles them sample-accurately when you process the correspinding sample in ProcessDoubleReplacing()
	- Attaching a GUI:
		- Add PNG resource info to resources.h & myplugin.rc
		- Create graphics context and attach controls, inked to parameter IDs
	- IControls.h?
	- Creating Factory Presets
		- End of Contructor
		- MakeDefaultPreset() = fills KNumParams with "blank" presets based on the default parameter values
		- MakePreset() = create a preset with raw float values
		- MakePresetFromNamedParams() = create a preset with param index, value pairs
		- MakePresetFromChunk() = fill a preset with binary data
		- MakePresetFromBlob() = fill a preset with bin64 encoded binary data
	- Handle Tempo:
		- Outside sample loop in ProcessDoubleReplacing()
		- GetTempo()
		- GetSamplePos()
		- GetSamplesPerBeat()
		- GetTime(ITimeInfo* pTimeInfo)
	- Awesome C++ Refresher /  Basic info
	- Class Inheritance
		- plugin's base class is IPlug (IPlugBase)
		- IPlug is actually IPlugAU or IPlugVST, depending on preprocessor macro definitions
		- IGraphics is actually IGraphicsWin or IGraphicsMac depending on preprocessor macro definitions
		- Switching happens in:
			- WDL/IPlug/IPlug_include_in_plug_hdr.h
			- WDL/IPlug/IPlug_include_in_plug_src.h
		- IControl parent class to:
			- IBitmapControl
			- IFaderControl
			- IFileSelectorControl
			- IInvisibleSwitchControl
			- IKeyboardControl
			- IKnobControl
			- IPanelControl
			- IRadioButtonsControl
			-ITextControl
			- IURLControl
	- DSP library for building up algorithms quickly with "urgens"
		- open source libraries:
			- ICST, libpd, JamomaDSP, Synthesis Tool Kit (STK), Gamma, Maximilian			
			
- Thoughts:
	- IPlug is a Class
	- WDL-OL is Oli Larkin's version of the WDL library
	- I need to get Visual Studio working so I can run MyFirstPlugin. 
	- I have yet to see code for individual modules (oscillators, filters, etc.)
	- I want to start making my own code (variable names, fn names, formating, comments, etc.)
	- Parameters are most likely variables that are directly related to the GUI.

------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/15/17

- I am going to begin the project by following this Martin Finkle article:
    http://www.martin-finke.de/blog/articles/audio-plugins-001-introduction/
    
- Setup Part 1: Accessing the repository from the windows terminal
    A) Installing Git:
        - https://www.youtube.com/watch?v=albr1o7Z1nw
        - Use most linux like options during installation
        - git config --global user.name "Brendan Thompson"
        - git config --global user.email "brenthompson2@gmail.com"
        - git config --global core.editor notepad   // Sets default editor to notepad. *** I didn't do this ***
        - git config --list // Lists possible things to configure
    B) Cloneing the repository onto my machine:
		- https://help.github.com/articles/cloning-a-repository/
		- Sucess! 
		- Downloading files
			- git fetch
			- git status
			- git pull
		- Uploading files
			- git add -A 	// A = uploads all
			- git commit -m "Message" 	// -m = with message
			- git push
		- Undo Commit
			- git reset HEAD^
        
------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/14/17:
	- Created Github Repository
  
	- Just Starting Info: http://www.kvraudio.com/forum/viewtopic.php?t=329696
		- Areas of Exploration:
			- Self-Teaching Advanced Topics
			- Audio Basics
			- Programming
			- Maths
			- Digital Signal Processing (DSP)
			- dspguide.com
			- Audio DSP
		- Enviornments:
			- SynthEdit
			- SynthMaker
			- Reaktor
			- Max/MSP
			- PureData
			- CSound
			- SuperCollider
			- Bidule
			- Usine 
		- Frameworks:
			- JUCE
			- IPlug
			- Cockos
			- VST.NET
			- Delphi ASIO and VST
		  
	- More Starting Info: http://www.soundonsound.com/techniques/vst-diy
		1) "SaveAs" Programs 
			(editing and playing = two different activities) 
			(Virtual Processing modules joined on screen with virtual patch cables)
			- SynthEdit by Jeff McClintock
			- SynthMaker by Outsim
			("Plug‑in authors who use them are dependent on the developers of the software in terms of the code 
			framework — the exported plug‑ins are really just a bundled‑up 'runtime' and preset in a VST wrapper —
			so if there's ever a problem that requires technical support, there are some very real limitations 
			to what the plug‑in author can address on their own")
		2) Cockos Reaper + JS Language
			("Basically, JS takes care of all the basic audio and user‑interface stuff for you, freeing you to 
			concentrate on writing your audio and MIDI processing in what they describe as a "C‑like language”, 
			without having to do the grunt‑work of getting it to interface with your host and its plug‑in architecture.")
      
	- Researching different development methods:
		- JUCE: http://www.olilarkin.co.uk/html/ftv2blank.png
			- Free personal version
			- https://www.youtube.com/watch?v=3Pm-WP4fv0k
		- *** C++ and WDL-OL Library ("Whittle") and IPlug     ****Favorite So Far***
			- http://www.martin-finke.de/blog/articles/audio-plugins-001-introduction/
			- Windows Machine + Visual Studio 2010 or later
		- Need software to test-host VST2 and VST3 plugins https://www.youtube.com/watch?v=uWitp7EOWVA
			- VSTHost for VST2 and Steinberg VST Test Host for VST3
		- Comparisons:
			- https://www.kvraudio.com/forum/viewtopic.php?p=6760826 (WDL-OL Wins)
   
	- Books:
        - *** "Designing Software Synthesizer Plug-Ins in C++: For RackAFX, VST3, and Audio Units" by Will Pirkle 
          https://www.amazon.com/Designing-Software-Synthesizer-Plug-Ins-RackAFX/dp/1138787078/ref=cm_wl_huc_item
        - "BasicSynth" by Daniel Mitchell https://www.amazon.com/BasicSynth-Daniel-Mitchell/dp/0557022126/ref=pd_rhf_p_t_1
  
    Thoughts:
		- Need to Download all necessary software
		- Hardest Parts are going to be getting the software setup, finding useful tutorials, and learning Digital Signal Processing
		- Books seem like the most help when it comes to actual synth contstruction
		- WDL and IPlug seem like what I want to use but are lacking in online resources.

--------------------------------------------














