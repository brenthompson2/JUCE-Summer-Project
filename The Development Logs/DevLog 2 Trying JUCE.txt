Brendan Thompson
Development Log 2: Trying JUCE

- Overview ---

This second log details my experience installing JUCE and trying to get my first plugin to build and be ran

07/17/17

Summary:
	- Watched the first 5 videos of The Audio Programmer's JUCE tutorial
	- JUCE online API Documentation = https://www.juce.com/doc/classes
Thoughts:
	- I wanna start coding already! Stupid VS2017 incompatabilities
	- Interesting to use rectangles to divide UI elements

- Creating a Synthesizer in JUCE
	- Example synth: https://www.youtube.com/watch?v=dYNx7PW5b9M

- JUCE Fraimwork Tutorial 00 - Intro and Building your First Project by The Audio Programmer on YouTube
	- https://www.youtube.com/watch?v=7n16Yw51xkI
	- Book Source: Getting started with JUCE by Martin Robinson
		- https://www.amazon.co.uk/Getting-Started-JUCE-Martin-Robinson/dp/1783283319
	- Example Demo Project looks incredibly helpful: 3:30 or 7:40
	- Accesses info on a class by cmd-clicking on an object in the code: 13:30

- Juce Tutorial 01- The Document Window Class by The Audio Programmer on YouTube
	- https://www.youtube.com/watch?v=OPSKfPWdr90&t=13s
	- Summary = The basic application window
	- Similar to https://juce.com/doc/tutorial_main_window
	- https://www.juce.com/doc/classDocumentWindow
	- The DocumentWindow 
		- Name
		- Background Color
		- titleBarButtons (close, minimize, expand) uses a bitmask: 5:30
	- View JUCE documentation online: 11:50
		- can see what is inherited
	- Use OS native title bar: 16:15

- Juce Tutorial 02- The Main Content Component Window by The Audio Programmer on YouTube
	- https://www.youtube.com/watch?v=WJYlJkLafFc&t=7s
	- Summary = The main GUI
	- https://www.juce.com/doc/classDocumentWindow
	- Inherited Functions
		- Paint = UI. Knobs, Sliders, Text, etc
			- centering objects = justification: centered: 9:10
		- Resized = When instantiated or resized
	
- Juce Tutorial 03- The Graphics Class, Parent & Child Components by The Audio Programmer on YouTube
	- https://www.youtube.com/watch?v=rguyzHWbFwU
	- Summary = Paint some basic shapes and text as child components of MainComponent
	- Drawing a NewComponent on the screen as a child of MainComponent
		1) Create NewComponent source and header files = 2:30
		2) #include NewComponent.h in MainComponent.h = 4:00
		3) Declare the NewComponent as a private object (child) to MainComponent = 4:20
		4) Paint the NewComponenet: 5:36
		5) AddAndMakeVisible(NewComponent) in constructor of MainComponent: 9:49
		6) Draw NewComponent coordinates relative to parent = NewComponent.setBounds(getLocalBounds): 10:32
	- Painting a path (closed shape or open ended): 23:00
		- Path newPath;
		- newPath.startNewSubPath(x, y);
		- newPath.lineTo(x, y);
		- newPath.closeSubPath();
		- g.fillPath(newPath);
		- g.strokePath(newPath, PathStrokeType(2.0f));
	- Painting text: 37:00
		- Font class for more customization
			- Font theFont(*Font Name*, *type*, size);
			- g.setFont(theFont);
		- g.drawText("The Text", Xcord, Ycord, width, height, Justification::topLeft););
	
- Juce Tutorial 04 - The Slider & Rectangle Class by The Audio Programmer on YouTube
	- https://www.youtube.com/watch?v=viR1Z7byTYw
	- Summary = 
	- Creating a dial (slider)
		1) Declaration in MainComponent.h = Slider dial1;
		2) addAndMakeVisable(dial1); in MainComponent constructor
		3) chose the type (slider, dial, etc) = dial1.setSliderStyle(Slider::SliderStyle::Rotary); 6:40
		4) setTextBoxStyle (above/below, readOnly = false so we can edit by typing, width, height);
		5) synch coordinates with parent = dial1.setBounds(getLocalBounds());
	- Use the rectangle class for laying out UI to ensure scalability 10:25
		1) Rectangle<int> mainArea = getLocalBounds();
		2) Rectangle<int> dialArea = area.removeFromBottom((area.getHeight() / 2)); = divided in half
		3) dial1.setBounds(dialArea);
		4) set a border = dial1.setBounds(dialArea.reduced(border)); 30:00
		
------------------------------------------------------------------------------
------------------------------------------------------------------------------

07/16/17

Summary:
	- Unfortunately, I do not have internet on my laptop right now and therefore can't reinstall Visual Studio.
	- Researched Solutions and Basic JUCE add-on Tutorials
Thoughts:
	- I am excited to get back to this project after going on three vacations and welcoming an 8 week old German Shepherd puppy into the family

- Possible other IDEs:
	- use VS2015 toolset with VS2017
		- https://forum.juce.com/t/visual-studio-2017-exporter/20668/3
		- comment on March 11th by pflugshaupt
	- JUCE installation on Ubuntu Linux partition
		- https://forum.juce.com/t/easy-juce-installation-on-ubuntu-linux-16-04/18159
		- 1 script that downloads all files, installs all dependencies, builds the projucer, creates a .desktop launcher, and makes the Projucer the default for .jucer files

- Compile from the command line
	- https://www.youtube.com/watch?v=5Y9Cx5cLM50
	
- "Manage your Projucer project"
	- https://www.juce.com/doc/tutorial_manage_projucer_project
	- Summary: Basics of the file structure and the projucer interface
	- Anatomy of a projucer project:
		- Source = C++ source code
		- Builds = export targets (for IDEs)
		- JuceLibraryCode = headers for JUCE library code. actual code in global JUCE folder
	- File Explorer Tab
		- file browser and basic C++ editor
		- Always use the projucer to add, rename, or remove source files. Never do it in the IDE
	- Modules Tab
		- Settings = overview over all currently used modules
			- set paths
		- individual module setting also possible
			- versions, licence, paths to additional dependencies used
	- Exporters Tab
		- all exporter targets and build settings
			- compiler and linker flags, platform specifics
		- add or delete exporter targets
		- Change to 64-bit versions:
			1) Duplicate configurations and rename as Debug64 and Release64
			2) change confifiguration build settings Architecture from 32-bit to 64-bit

- "Create a basic Audio/MIDI plugin Part 1: Setting Up"
	- https://www.juce.com/doc/tutorial_create_projucer_basic_plugin
	- Summary: set up computer, create first projucer project, debug it with built-in host
	- Download JUCE
	- Download and Install plugin dependencies
	- Create an audio plug-in
	- set up built-in plug-in host
		- open the binary produced by the IDE and graphical node editor should open
		- Options > Edit the list of available plugins
			- scan for new or updated VST plug-ins
				- automatically copied to ~/Library/Audio/Plug-Ins/VST
		- Options > Change the audio device settings
			- ensure inputs and outputs are correct
		- Insert plugin = Right click > "yourcompany" > MyPlug-In
		- connect midi and audio nodes
	- Launch plugin GUI by double clicking
	- Enable step-through debugging (Xcode example)
		- build and run in IDE will automatically launch the host
		- Product > Scheme > Edit Scheme
		- in Run select Other
		- Locate Plugin Host.app binary
		- Ensure "Debug Executable" is ticked
			

- "Create a basic Audio/MIDI plugin Part 2: Coding your plug-in"
	- Orientation of newly created audio plug-in project:
		- Classes:
			- PluginProcessor = audio and midi io & processing
				- only 1
				- processBlock() = produce and receive audio and midi 
			- PluginEditor = GUI controls and visualisations
				- multiple with references to the one processor
				- set and get information on the processor thread
				- paint() = draw extra controls and custom GUI components
				- setSize(x,y) = method for window size
			- Consider Processor as parent to Editor
	- Create a Slider object
		1) Create the object
		- in the editor header create a private object [CODE] "Slider midiVolume;"
		- AudioProcessorEditor() ~= Main()
			[CODE]
			TutorialPluginAudioProcessorEditor::TutorialPluginAudioProcessorEditor (TutorialPluginAudioProcessor& p)
  				: AudioProcessorEditor (&p), processor (p)
			{
    				// This is where our plugin’s editor size is set.
    				setSize (200, 200);
 
    				// these define the parameters of our slider object
    				midiVolume.setSliderStyle (Slider::LinearBarVertical);
    				midiVolume.setRange(0.0, 127.0, 1.0);
    				midiVolume.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    				midiVolume.setPopupDisplayEnabled (true, this);
   				 midiVolume.setTextValueSuffix (" Volume");
    				midiVolume.setValue(1.0);
 
    				// this function adds the slider to the editor
    				addAndMakeVisible (&midiVolume);
			}
		- resized() = called upon initialisation and resizing
			- set size and position of the slider
		- paint() = Change text from "Hello World" to "Midi Volume"
		- ensure that it runs
		2) Code the object
		- Create new public variable in processor class [CODE] "float noteOnVel;" (note on velocity
		- add inheritance and default callback function to the Editor header
			[CODE]
			class TutorialPluginAudioProcessorEditor : public AudioProcessorEditor,
                                          			   private Slider::Listener
			{
			public:
   				TutorialPluginAudioProcessorEditor (TutorialPluginAudioProcessor&);
    				~TutorialPluginAudioProcessorEditor();

    				void paint (Graphics& g) override;
 
    				void resized() override;
 
			private:
   				void sliderValueChanged (Slider* slider) override;
				...
			};
		- add listener to volume sslider in the Editor
			- [CODE] "midiVolume.addListener (this)"
		- add listener to public processor volume variable
			[CODE]
			void TutorialPluginAudioProcessorEditor::sliderValueChanged (Slider* slider)
			{
				processor.noteOnVel = midiVolume.getValue();
			}
		3) Modify MIDI notes
			- create new MidiBuffer processedMidi
			- iterate through buffer messages (m) and set noteOn velocities to the slider value
			- processedMidi.addEvent(m, time)
		
------------------------------------------------------------------------------
------------------------------------------------------------------------------

06/19/17

Summary:
	- Switched to JUCE
	- Still struggling to get Visual Studio to build projects
	- After Modifying the install of Visual Studio, the program stopped working completely
	
Thoughts:
	- Visual Studio has been nothing but trouble
	- I want to figure out how to build projects using VS through the command line
	- The WDL-OL code looked a lot nicer
	
- After 3 days of struggling with the IPlug Framework, I am switching to JUCE.
	- Main Issues with IPlug:
		1) There are very limited resources for learning this method
		2) Can't Get Visual Studio to run MyFirstPlugin
			- 2 Builds completed but there is still 1 failing
			- "LNK2019 unresolved external symbol "int_stdcall MainDlgProc(struct HWND_*, unsigned int, unsigned int, long)""
			- I am afraid it will take to long to track down that line in the code and attempt to figure out what it is doing
			- Everything being outdated and nothing working is annoying me
			- Tracking down all of these SDKs and Dependencies is a struggle
		3) Can't turn Basic Visual Studio Project into WLD-OL example plugin project
			- All of the content in the files are radically different
			- The folders are totally different and have different files
		4) EVERYTHING is old and outdated
	- JUCE:
		- Well developed and maintained by a legitimate company
		- Online resources like forums and videos
		- Advanced Libraries and Classes
			- JUCE handles most Digital & Audio Signal Processing
			- JUCE handles MIDI input & output
		- Neat GUI development tools
		- Well constructed development software
		- Still C++ coding practice
		- Still practice using other libraries and classes
		- Still uses Visual Studio to build the project
- Downloading JUCE
	- https://www.juce.com/get-juce
	- JUCE 5 Personal for Windows
	- Still need SDK from Steinberg
	- Extracted Files
	- Opened Projucer and started creating an account
		- It froze so I clicked the esc key and it closed but wont re-open
		- I used Task Manager to kill the process
		- It happened again! When creating an account, when I try to select my month of birth the app crashes
			- Actually it just freezes for a period of time. It just let me scroll down and then froze again
			- It unfreezes whenever I click off the application
- Creating my first JUCE project
	- Audio Plug-In
		- Visual Studio 2017
		- It appears to have worked. 
	- Enable Compilation
	- Feeling a little overwhelmed by all of the variables and functions already in the code
		- The WDL-OL framework seemed a lot lighter and easier to use
- Creating My First JUCE Plugin
	- https://www.juce.com/doc/tutorial_create_projucer_basic_plugin
	- Dependencies:
		- I had previously downloaded the VST3 SDK straight from Steinberg
			- Check path for VST in JUCE
			- File > Preferences
			- D:\Brendan\Documents\2017 Summer Project\VST Synthesizer Design\vstsdk367_03_03_2017_build_352\VST_SDK\VST3_SDK
	- Create FirstJucePlugin
	- Configuration Settings:
		- Build VST
		- MIDI input & output
	- File > Save Project and Open in IDE
		- Opens Visual Studio 2017
- Building in VS:
	- These projects are out of date:
		- FirstJucePlugin_SharedCode - Debug x64
		- FirstJucePlugin_VST - Debug x64
	- 2 Builds succeeded, 0 failed
	- Error: "Unable to start program "...NewProject.dll" is not a valid Win32 application
		- https://forum.juce.com/t/path-plugin-dll-is-not-a-valid-win32-application/16492
		- "An audio plug-in is not an app, you cannot run it directly. It is a dynamic library (dll) that you need to load in a host application"
		- "in VS just build the plug-in without trying to run it"
	- **** Only Using Visual Studio to build the project, not run it. Need a Host application for that
		- I should figure out how to build it from the command line
	- Recommendation: Close out of Visual Studio before save/re-open (otherwise it freaks out)
- JUCE built-in debugger one-time setup
	- examples/audio plugin host/
		- open the .jucer file with the projucer
	- Save & Open in IDE
		- Retarget Projects:
			- The following projects use an earlier version of the Visual C++ toolset.
			- Windows SDK: 10.0.15063.0
			- Platform Toolset: Upgrade to v141
			- .../VisualStudio2013\Plugin Host_App.vcxproj
	- Build Error: "MSB8020 The build tools for v141 cannot be found."
		- "Install v141 or upgrade to the current visual studio tools be selecting "Retarget Solution""
		- Project > Retarget Solution
			- Platform Toolset: No Upgrade
			- Same error except for v120
		- Project > Properties > Configuration Properties > general > platform toolset > 
			- 4 Options:
				- VS 2017 (v141)
				- VS 2017 xp (v141_xp)
				- VS 2013 (v120) (not installed)
				- inherit from parent or project defaults
			- Selecting VS 2017 (v141) made the 2013 version disapear
		- Modify VS installer to include "Desktop Development with C++"
			- It was included...
		- Downloaded "Build Tools for Visual Studio 2017" & "Microsoft Visual C++ Redistributable for VS 2017"(x64 & x86)
			- https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017
		- Visual Studio Modification:
			- Individual Components all Windows 10 SKDs & all 3 Windows Workloads
			- "The setup for this installation of Visual Studio is not complete. Please run the Visual Studio Installer again to correct the issue"
- Visual Studio is broken again...
		
- "The Golden Rules of Audio Programming, Pete Goodliffe" by JUCE on YouTube
	- Multiple Cores = Manage threads carefully
		- UI seperate from Audio
		- Run Multiple Instances at once
		- add more features
	- Buffer size affects responsivity
	- Audio Generation must take less time than the buffer period
	- Preception:
		- UI Perception:
			- 100ms = instantaneous
			- 1s = interacting freely
			- 10s = huge delay
		- Audio Response is much finer:
			- 1-5ms = instantaneous/at once
			- 40ms = echo
	- Golden Rules
		1) Stay within CPU budget
			- Latency = speed
			- Unacceptable to not get audio out of the renderer in the alloted time slice
		2) If you don't know how long it will take, don't do it on the Audio threads
			- Jitter = non-reliable, inconsistent lag
			- Consider Algorithm Complexity
				- consider worst case
				- consider which thread (UI vs Audio)
			- Consider Data Structure Complexity
				- std::vector is nice, use often: caches, other optimizations
				- However, do not allocate or unallocate memory (append or remove)
			- No Locks = for fear audio thread blocked by something else
				- Use lock/wait free data structures
				- Some primitives not as lock-free as they should be
			- No Memory Allocation on audio thread = don't append or remove from a dynamic data structure in the audio thread for fear of memory management
				- memory allocators use locks
				- may not run in bounded time
				- custom allocators
					- boost::memory_pool
					- dlmalloc 
				- Pre-Allocate 
				- Allocate on UI thread
			- No Logging on the audio thread
				- NSLog and printf lock-free
				- Use a trusted logging library
			- No OS Calls
				- locks
			- No Disk Access
				- Probably locks
				- Probably takes more time than buffer period
			- No Network Activity
			- Don't Trust 3rd party libraries	
			- Languages:
				- C & C++ = good fight
				- Interpreted languages possibly too slow
				- Grabage Collection bad = Java, Ruby, C#
				- Ref-Counting = python, C++(RAII)
		3) Respect Threads
			- don't "presume" what is the real time high-priority "audio thread"
			- Data Tearing
				- Can't use a lock
				- Use 2 Coefficients, use the old one until the new one is completely updated
				- Use Atomic data
					- int, bool, float, pointers
			- Data Model
				- lives on UI thread, renderable copy on audio thread
		4) Chose the right data representation
			- Floating Point
				- Problems at infinitesimal or very large sizes
				- Denormals = bad
			- Fixed point
				- clear over or under flow
				- explicit about headroom

"Evolution of Audio Plugins and Best Usability Practices, Gebre Waddell, JUCE Summit 2015" by JUCE on YouTube
	- Analog Boxes
		- Can become classic
	- First ever software plugins were for a Univac MainFrame Word in the 70s
	- First Audio Software Plugin was "Waves Q10" in 1992
		- Still available to buy today!!!
		- Can also become classic
	- Retail sales of plugins are over $25 Million
	- Open Source Community:
		- Infinite Impulse Response Filters (Vinnie Falco DSP)
		- LUFS metering
		- Convolution Reverb
		- Binaural Processing
		- MusicDSP.org
		- code.soundsoftware.ac.uk
	- Trends:
		- Less Features, Simplified, Helps with workflow
		- Slide-out menus (Hide additional features)
			- LUFSMeter/Projects/LUFSMeter/Source/gui/AnimatedSidePanel.cpp
		- Flat design is trending over Skeuomorphic design in interfaces
	- Raise the musical experience
		- Solve Problems
		- Efficient Tools
		- High Quality
		


		
				
